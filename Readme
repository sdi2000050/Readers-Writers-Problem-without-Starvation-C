ΓΕΩΡΓΙΑ ΕΥΑΓΓΕΛΟΥ
ΑΜ 1115202000050

shared_mem.c:

Το πρόγραμμα αυτό δημιουργεί το shared memory και αναλαμβάνει την κλήση των προγραμμάτων
reader και writer. Λαμβάνει από το command line το αρχείο και δημιουργεί το shared memory 
στο οποίο περιλαμβάνονται ένα πακέτο σεμαφόρων και κατάλληλων μεταβλητών για κάθε record
του αρχείου για την αντιμετώπηση του reader writer problem χωρίς starvation. Οπότε στο αρχείο 
κάνουμε και την αρχικοποίηση των σεμαφόρων και στη συνέχεια δημιουργούνται ένας τυχαίος αριθμός
readers και writers δημιουργώντας το κατάλληλο command line για τον καθένα. Επομένως χρησιμοποιούμε
fork/exec για την τυχαία κλήση των προγραμμάτων αυτών. Αφού τελειώση η εκτέλεση όλων των 
προγραμμάτων εκτυπώνονται τα κατάλληλα στατιστικά, καταστρέφονται οι σεμαφόροι και απελευθερώνεται
και η shared memory.

reader.c:

Το πρόγραμμα αυτό εκτελεί την δουλειά του reader. Αρχικοποιούμε δύο μεταβλητές για να 
χρονομετρήσουμε τον χρόνο εκτέλεσης του προγράμματος και στη συνέχεια λαμβάνουμε όλα τα 
κατάλληλα δεδομένα από το command line. Γίνεται attach στο shared memory και παίρνουμε 
τα records που θελουμε να διαβαστούν. Ενημερώνουμε κατάλληλα τα δεδομένα του shared memory
όπως των αριθμό των readers και των records και καλούμε για κάθε ένα από αυτά την συνάρτηση
reader_criticalsection στο οποίο εκτελείται το critical section κατάλληλα. Στη συνέχεια 
ενημερώνουμε τα στατιστικά για τον χρόνο εκτέλεσης και κάνουμε dettach το shared memory. 

writer.c:

Το πρόγραμμα αυτό εκτελεί την δουλειά του writer. Αρχικοποιούμε δύο μεταβλητές για να 
χρονομετρήσουμε τον χρόνο εκτέλεσης του προγράμματος και στη συνέχεια λαμβάνουμε όλα τα 
κατάλληλα δεδομένα από το command line. Γίνεται attach στο shared memory και παίρνουμε 
το record που θελουμε να αλλάξουμε και το value που θα μειωθεί το υπόλλοιπο. Ενημερώνουμε 
κατάλληλα τα δεδομένα του shared memory όπως των αριθμό των writers και των records και 
την συνάρτηση writer_criticalsection στο οποίο εκτελείται το critical section κατάλληλα. 
Αφού έχουμε επεργαστεί το record καλούμε και την συνάρτηση update_file που ενημερώνει κατάλληλα
το αρχείο. Στη συνέχεια ενημερώνουμε τα στατιστικά για τον χρόνο εκτέλεσης και κάνουμε dettach 
το shared memory.

reader_writer_Implementatio.c:

writer_criticalsection: Στην συνάρτηση αυτή αρχικοποιούμε δύο μεταβλητές για να χρονομετρήσουμε την καθυστέρηση
εώς ότου μπει στο critical section και εκτελούμε το critical section ως εξής:
Αρχικά ο writer περιμένει στο mutex1 με όλους τους readers. Μετά την ενεργοποίηση του mutex1
προχωράει στην αναμονή του mutex2. Μετά την ενεργοποίηση και του mutex2 ελέγχει αν υπάρχει 
κάποιος reader που ακόμα διαβάζει συγκρίνοντας τις μεταβλητές readact και readcomp που αντιπροσωπεύουν
τους ενεργούς readers και τους readers που έχουν ολοκληρώσει την δουλειά τους αντοίστιχα. Αν οι δύο αυτές
μεταβλητές είναι ίσες τότε δεν δουλεύει κάποιος reader με το συγκεκριμένο record οπότε ο writer απελευθερώνει τον
mutex2 και εισέρχεται στο critical section. Αν οι δύο μεταβλητές δεν είναι ίσες τότε ο writer πρέπει να περιμένει
εώς ότου όλοι οι readers ολοκληρωθούν επομένως ενημερώνει την wrtwait σε true ωστε να ενημερώσει τους readers ότι
περιμένει και να μην συμβεί starvation. Απελευθερώνει τον mutex2 και περιμένει στον wrt σημαφόρο εώς ότου μπορέσει 
να προχωρήσει στο critical section. Όταν σηματοδοτηθεί από τους readers τότε αλλάζει πάλι μεταβλητη wrtwait σε false
και προχωράει στο critical section. Όταν ολοκληρώσει την εργασία του ενεργοποεί και πάλι τον mutex1 ώστε να μπορεί ο
επόμενος reader/writer να ασχοληθεί με το συγκεκριμένο record. Τέλος ενημερώνει και τα στατιστικά για την καθυστέρηση 
του εως την εισοδό του στο critical section. 

reader_criticalsection: Στην συνάρτηση αυτή αρχικοποιούμε δύο μεταβλητές για να χρονομετρήσουμε την καθυστέρηση
εώς ότου μπει στο critical section και εκτελούμε το critical section ως εξής:
Αρχικά ο reader περιμένει στο mutex1, εως ότου ενεργοποιηθεί. Στη συνέχεια αυξάνει την μεταβλητή readact και σηματοδοτεί
τον mutex1 ώστε να μην εισέλθει κάποιος writer σε αυτό το record. Προχωράει λοιπόν στο critical section. Όταν ολοκληρώσει
την εργασία του περιμένει στο mutex2 και αφού ενεργοποιηθεί ενημερώνειτην μεταβλητή readcomp ότι ολοκληρώθηκε.
Έπειτα ελέγχει αν κάποιος writer περιμένει να διαβάσει το record, και αν δεν υπάρχει άλλος reader, και αν ναι τότε ενημερώνει 
τον writer σηματοδοτώντας τον wrt. Τέλος σηματοδοτεί και τον mutex2 και ενημερώνει και τα στατιστικά για την καθυστέρηση του 
εως την εισοδό του στο critical section.

update_file: Ενημερώνει στο αρχείο το record i που έχει μεταβληθεί στον πίνακα από records.

get_records: Επιστρέφει έναν πίνακα από records και ενημερώνει κατάλληλα τον αρθό των records
που λαμβάνει από το αρχείο.

notinarray: Ελέγχει αν ένα στοιχείο δεν βρίσκεται στον πίνακα από ints.

printrecords: Εκτυπώνει τα records από το αρχείο.